/* Generated By:JavaCC: Do not edit this line. GML.java */
package mayday.graphviewer.datasources.gml;




@SuppressWarnings("all")
public class GML implements GMLConstants {

  static final public KeyValueObject topLevel() throws ParseException {
        KeyValueObject root;
    root = list();
    jj_consume_token(0);
                {if (true) return root;}
    throw new Error("Missing return statement in function");
  }

  static final public KeyValueObject list() throws ParseException {
        Token t;
        KeyValueObject listObject;
        String key=null;
        Object o=null;
          listObject=new KeyValueObject();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case KEY:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      t = jj_consume_token(KEY);
       key=t.image;
//       System.out.println(key);

      o = value();
//        System.out.println(key+"\t"+o.toString());
                if(o instanceof KeyValueObject)
                {
                   KeyValueObject kvo=(KeyValueObject)o;
                   kvo.setKey(key);
                        listObject.addChild(kvo);
                }else
                {
                  listObject.put(key,o.toString());
//		  System.out.println(key+"\t"+o.toString());
                }
    }
                {if (true) return listObject;}
    throw new Error("Missing return statement in function");
  }

  static final public Object value() throws ParseException {
        Token t;
        Object o;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      t = jj_consume_token(INTEGER);
//    System.out.println("\tI"+t.image);
    {if (true) return t.image;}
      break;
    case REAL:
      t = jj_consume_token(REAL);
    {if (true) return t.image;}
      break;
    case STRING:
      t = jj_consume_token(STRING);
//    System.out.println("\tS"+t.image);
    {if (true) return t.image;}
      break;
    case LEFTB:
      jj_consume_token(LEFTB);
      o = list();
      jj_consume_token(RIGHTB);
          {if (true) return o;}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public GMLTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[2];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x400,0x14900,};
   }

  /** Constructor with InputStream. */
  public GML(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public GML(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new GMLTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public GML(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new GMLTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public GML(GMLTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(GMLTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[18];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 2; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 18; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

//  public static void main(String args []) throws ParseException, FileNotFoundException//  {//    GML parser = new GML(new FileInputStream("/home/symons/Desktop/graphparsers/gml/e1.gml"));//	KeyValueObject o=GML.topLevel();//	System.out.println("Parsed 1 ok");//	ReInit(new FileInputStream("/home/symons/Desktop/graphparsers/gml/e2.gml"));////	GML.topLevel();//	System.out.println("Parsed 2 ok");//	//    ReInit(new FileInputStream("/home/symons/Desktop/graphparsers/gml/e3.gml"));//	GML.topLevel();//	System.out.println("Parsed 3 ok");//    ReInit(new FileInputStream("/home/symons/Dropbox/Projects/Laubfrosch/intarnaUrlaub_many_joined.out_thres-1-2percent_yedited-g0-3red.gml"));//	GML.topLevel();//	System.out.println("Parsed 4 ok");//	ReInit(new FileInputStream("/home/symons/Dropbox/Projects/Laubfrosch/intarnaUrlaub_many_joined.out_thres-1-2percent_yedited-g0-3red_hubsOnly.gml"));//	GML.topLevel();//	System.out.println("Parsed 5 ok");//	ReInit(new FileInputStream("/home/symons/Dropbox/Projects/Laubfrosch/intarnaUrlaub_many_joined.out_thres-1-2percent_yedited-g0-3red_scoHubs-g6.gml"));//	GML.topLevel();//	System.out.println("Parsed 6 ok");//	//	ReInit(new FileInputStream("/home/symons/Dropbox/Projects/Laubfrosch/small.gml"));//	GML.topLevel();//	System.out.println("Parsed 7 ok");//	ReInit(new FileInputStream("/home/symons/Dropbox/Projects/Laubfrosch/small2.gml"));//	GML.topLevel();//System.out.println("Parsed 8 ok");

//    while (true)//    {//      System.out.println("Reading from standard input...");//      System.out.print("Enter an expression like \"1+(2+3)*4;\" :");//      try//      {//        GML.topLevel();//      }//      catch (Exception e)//      {//		e.printStackTrace();//        ReInit(System.in);//      }//      catch (Error e)//      {//        System.out.println("Oops.");//        System.out.println(e.getMessage());//        break;//      }//    }


//    GML parser = new GML(System.in);//    while (true)//    {//      System.out.println("Reading from standard input...");//      System.out.print("Enter an expression like \"1+(2+3)*4;\" :");//      try//      {//        GML.topLevel();//      }//      catch (Exception e)//      {//        System.out.println("NOK.");//        System.out.println(e.getMessage());//        ReInit(System.in);//      }//      catch (Error e)//      {//        System.out.println("Oops.");//        System.out.println(e.getMessage());//        break;//      }//    }//  }}
